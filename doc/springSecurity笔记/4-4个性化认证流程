BrowserSecurityConfig.java
@Override
    protected void configure(HttpSecurity http) throws Exception {
        http.formLogin()
//        http.httpBasic()
                .loginPage("/authentication/require")  //自定义认证流程
                .loginProcessingUrl("/authentication/form")
                .and()

                .authorizeRequests()
                .antMatchers("/authentication/require",
                        securityProperties.getBrowser().getLoginPage()).permitAll()  //自定义认证流程，开放登录权限
                .anyRequest()
                .authenticated() //需要认证
                .and()
                .csrf().disable(); // 302错误，先关闭csrf检查
    }


/authentication/require 的实现
@Slf4j
@RestController
public class BrowserSecurityController {

    private RequestCache requestCache = new HttpSessionRequestCache();

    private RedirectStrategy redirectStrategy = new DefaultRedirectStrategy();

    @Autowired
    private SecurityProperties securityProperties ;
    /**
     * 当需要身份认证时 跳转到这里
     * @param request
     * @param response
     * @return
     */

    @RequestMapping("/authentication/require")
    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    public SimpleResponse requireAuthentication(HttpServletRequest request, HttpServletResponse response) throws IOException {
        SavedRequest savedRequest = requestCache.getRequest(request,response);
        if (savedRequest != null){
            String targetUrl = savedRequest.getRedirectUrl();
            log.info("引发跳转的url是：{}",targetUrl);
            if (StringUtils.endsWithIgnoreCase(targetUrl,".html")){
                redirectStrategy.sendRedirect(request,response,securityProperties.getBrowser().getLoginPage());
            }
        }
        return new SimpleResponse("访问的服务需要身份认证，请引导用户到登录页（前端拦截到401后跳转到登录页面）");
    }
}
